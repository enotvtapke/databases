-- 1.S. Индексы на таблицу Students

-- pk
-- ДЗ-5.1.1. Информацию о студентах С заданным идентификатором
-- ДЗ-5.2.1. Полную информацию о студентах С заданным идентификатором
-- ДЗ-7.2.1. Напишите запросы, обновляющие данные студентов Изменение
-- имени студента
create unique index students_studentId on students using hash (studentid);

-- покрывающий индекс, так как размер studentId + groupId много меньше
-- размера studentName. Есть возможность искать по префиксу
-- ДЗ-5.1.2. Информацию о студентах С заданным ФИО
-- ДЗ-5.2.2. Полную информацию о студентах С заданным ФИО
-- ДЗ-6.1.1. Информацию о студентах С заданным ФИО
create index students_studentName_studentId_groupId on students using btree (studentname, studentid, groupid);

-- Hash достаточно при проверке на равенство конкретному значению. Для join
-- ДЗ-6.6.1. Группы и дисциплины, такие что все студенты группы имеют
-- оценку по предмету Идентификаторы
-- ДЗ-7.1.1. Напишите запросы, удаляющие студентов Учащихся в группе,
-- заданной идентификатором
-- ДЗ-7.2.3. Напишите запросы, обновляющие данные студентов Перевод
-- всех студентов из группы в группу по идентификаторам
create index students_groupId on Students using hash (groupid);


-- 1.G. Индексы на таблицу Groups

-- pk
-- ДЗ-6.2.1. Полную информацию о студентах Для всех студентов
-- ДЗ-6.2.2. Полную информацию о студентах Студентов, не имеющих оценки
-- по дисциплине, заданной идентификатором
-- ДЗ-6.2.3. Полную информацию о студентах Студентов, не имеющих оценки
-- по дисциплине, заданной названием
create unique index groups_groupId on groups using hash (groupid);

-- Ключ. Покрывающий индекс
-- ДЗ-6.1.2. Информацию о студентах Учащихся в заданной группе
-- ДЗ-7.1.2. Напишите запросы, удаляющие студентов Учащихся в группе,
-- заданной названием
-- ДЗ-7.2.5. Напишите запросы, обновляющие данные студентов Перевод всех
-- студентов из группы в группу, только если целевая группа существует
create unique index groups_groupName on groups using btree (groupname, groupid);


-- 1.C. Индексы на таблицу Courses

-- pk
-- ДЗ-6.4.1. Студенты и дисциплины, такие что дисциплина есть в его плане,
-- и у студента долг по этой дисциплине Долгом считается отсутствие оценки
-- ДЗ-6.4.2. Студенты и дисциплины, такие что дисциплина есть в его плане,
-- и у студента долг по этой дисциплине Долгом считается оценка не выше 2
-- ДЗ-5.4.1. Информацию о студентах не имеющих оценки по дисциплине Среди
-- всех студентов
create unique index courses_courseId on courses using hash (courseid);

-- Надключ, возможность искать дисциплину по префиксу имени
-- ДЗ-5.3.2. Информацию о студентах с заданной оценкой по дисциплине С
-- заданным названием
-- ДЗ-5.4.1. Информацию о студентах не имеющих оценки по дисциплине Среди
-- всех студентов
-- ДЗ-5.4.2. Информацию о студентах не имеющих оценки по дисциплине Среди
-- студентов, у которых есть эта дисциплина
create unique index courses_courseName_courseId on courses using btree (coursename, courseid);


-- 1.L. Индексы на таблицу Lecturers

-- pk
create unique index lecturers_lecturerId on lecturers using hash (lecturerid);

-- Поиск под префиксу имени. Покрывающий индекс
-- ДЗ-5.3.4. Информацию о студентах с заданной оценкой по дисциплине
-- Которую у него вёл лектор, заданный ФИО
-- ДЗ-5.3.6. Информацию о студентах с заданной оценкой по дисциплине
-- Которую вёл лектор, заданный ФИО
-- ДЗ-5.6.1. Идентификаторы студентов по преподавателю Имеющих хотя
-- бы одну оценку у преподавателя
create index lecturers_lecturerName_lecturerId on Lecturers using btree (LecturerName, LecturerId);


-- 1.P. Индексы на таблицу Plan

-- Не нужен покрывающий индекс, не нужно искать по префиксу => hash
-- ДЗ-5.3.3. Информацию о студентах с заданной оценкой по дисциплине
-- Которую у него вёл лектор заданный идентификатором
-- ДЗ-5.3.5. Информацию о студентах с заданной оценкой по дисциплине
-- Которую вёл лектор, заданный идентификатором
create index plan_lecturerId on plan using hash (lecturerid);

-- нужен поиск по равенству courseId конкретному значению, то есть не
-- нужен покрывающий индекс, не нужно искать по префиксу => hash
-- ДЗ-6.2.4. Полную информацию о студентах Студентов, не имеющих оценки
-- по дисциплине, у которых есть эта дисциплина
create index plan_courseId on plan using hash (courseid);

-- Лучше использовать покрывающий индекс.
-- ДЗ-7.3.5. Напишите запросы, подсчитывающие статистику по студентам
-- Число долгов студента
-- ДЗ-7.3.6. Напишите запросы, подсчитывающие статистику по студентам
-- Число долгов каждого студента
-- ДЗ-7.3.7. Напишите запросы, подсчитывающие статистику по студентам
-- Число долгов каждого студента группы (столбец Students.Debts)
create index plan_groupId on plan using btree (groupid, courseid);


-- 1.M. Индексы на таблицу Marks

-- ключ. Нужен поиск по префиксу индекса. Покрывающий индекс
-- ДЗ-5.3.1. Информацию о студентах с заданной оценкой по дисциплине
-- С заданным идентификатором
-- ДЗ-5.3.2. Информацию о студентах с заданной оценкой по дисциплине
-- С заданным названием
-- ДЗ-6.2.2. Полную информацию о студентах Студентов, не имеющих оценки
-- по дисциплине, заданной идентификатором
create unique index marks_courseId_studentId_mark on marks using btree (courseid, studentid, mark);

-- покрывающий индекс. Нужен поиск по префиксу индекса.
-- ДЗ-5.8.1. Суммарный балл Одного студента
-- ДЗ-5.8.2. Суммарный балл Каждого студента
-- ДЗ-5.9.1. Средний балл Одного студента
create index marks_studentId_mark on marks using btree (studentid, mark);
